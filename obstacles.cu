#include "obstacles.cuh"

int getObstaclesCount()
{
	return 3; // WARNING: IF USING SHARED MEMORY, NEED TO MANUALLY EDIT in hsmc.cu __shared__ obstacles
}

void generateObstacles(float* obstacles, int obstaclesLength) 
{
	if (DIM == 2) {
		float obstaclesTmp[] = {
			0.434752, 0.542681,  0.853504, 0.947454, 
			0.543562, 0.0691414, 0.945129, 0.521948, 
			0.052904, 0.215034,  0.421858, 0.617981};
		copyArray(obstacles, obstaclesTmp, obstaclesLength);
	} else if (DIM == 3) {
		float obstaclesTmp[] = {
			0.434752, 0.542681,  -3.1, 0.853504, 0.947454,  3.1,  
			0.543562, 0.0691414, -3.1, 0.945129, 0.521948,  3.1,  
			0.052904, 0.215034,  -3.1, 0.421858, 0.6179810, 3.1};
		copyArray(obstacles, obstaclesTmp, obstaclesLength);
	} else if (DIM == 4) {
		float obstaclesTmp[] = {
			0.434752, 0.542681,  -3.1, -3.1, 0.853504, 0.947454,  3.1, 3.1,  
			0.543562, 0.0691414, -3.1, -3.1, 0.945129, 0.521948,  3.1, 3.1, 
			0.052904, 0.215034,  -3.1, -3.1, 0.421858, 0.6179810, 3.1, 3.1};
		copyArray(obstacles, obstaclesTmp, obstaclesLength);
	} else if (DIM == 6) {
		// float obstaclesTmp[] = {
		// 	0.434752, 0.542681,  -3.1, -3.1, -3.1, -3.1, 0.853504, 0.947454,  3.1, 3.1, 3.1, 3.1,  
		// 	0.543562, 0.0691414, -3.1, -3.1, -3.1, -3.1, 0.945129, 0.521948,  3.1, 3.1, 3.1, 3.1,  
		// 	0.052904, 0.215034,  -3.1, -3.1, -3.1, -3.1, 0.421858, 0.6179810, 3.1, 3.1, 3.1, 3.1};
		
		// 3obs, getObstaclesCount = 3, (0.1s) -> (0.9s)
		float obstaclesTmp[] = {
			0.05, 0.20, -3.1, -3.1, -3.1, -3.1, 0.45, 0.35, 3.1, 3.1, 3.1, 3.1,  
			0.70, 0.30, -3.1, -3.1, -3.1, -3.1, 0.90, 0.50, 3.1, 3.1, 3.1, 3.1,  
			0.30, 0.60, -3.1, -3.1, -3.1, -3.1, 0.80, 0.75, 3.1, 3.1, 3.1, 3.1};

		// 3obs new, getObstaclesCount = 3, (0.75 0.1 0.1) -> (0.75 0.9 0.9), offsetMult = 1
		// float obstaclesTmp[] = {
	 //            0.25, 0.30, -3.1, -3.1, -3.1, -3.1, 0.55, 0.60, 3.1, 3.1, 3.1, 3.1,
	 //            0.70, 0.20, -3.1, -3.1, -3.1, -3.1, 0.85, 0.50, 3.1, 3.1, 3.1, 3.1,
	 //            0.80, 0.70, -3.1, -3.1, -3.1, -3.1, 0.95, 0.80, 3.1, 3.1, 3.1, 3.1};

		// getObstaclesCount = 3, (0.1s) -> (0.9s)
		// float obstaclesTmp[] = {
		// 	-0.5, 0.20, -3.1, -3.1, -3.1, -3.1, 0.40, 0.45, 3.1, 3.1, 3.1, 3.1,  
		// 	0.60, 0.32, -3.1, -3.1, -3.1, -3.1, 0.70, 0.75, 3.1, 3.1, 3.1, 3.1,  
		// 	0.80, 0.05, -3.1, -3.1, -3.1, -3.1, 0.95, 0.50, 3.1, 3.1, 3.1, 3.1};

		// regression
		// getObstaclesCount = 5, offsetMult = 0.5), (0.1, 0.1, 0.1) -> (0.8, 0.5, 0.8)
		// float obstaclesTmp[] = {
		// 	-3.1, 0.30, -3.1, -3.1, -3.1, -3.1, 0.10, 0.70, 3., 3., 3., 3.,
		// 	0.27, 0.31, -3.1, -3.1, -3.1, -3.1, 0.57, 0.72, 3., 3., 3., 3.,
		// 	-3.1, 0.90, -3.1, -3.1, -3.1, -3.1, 0.72, 3., 3., 3., 3., 3.,
		// 	0.72, 0.70, -3.1, -3.1, -3.1, -3.1, 3., 3., 3., 3., 3., 3.,
		// 	0.62, 0.23, -3.1, -3.1, -3.1, -3.1, 3., 0.25, 3., 3., 3., 3.};

		// gap
		// getObstaclesCount = 2, offsetMult = 0.6, (0.7, 0.1, 0.1) -> (0.7, 0.9, 0.9)
		// float obstaclesTmp[] = {
		// 	0.67, 0.4, -3.1, -3.1, -3.1, -3.1, 3.1, 0.6, 3.1, 3.1, 3.1, 3.1,
		// 	0.45, 0.4, -3.1, -3.1, -3.1, -3.1, 0.60, 0.6, 3.1, 3.1, 3.1, 3.1};

		// getObstaclesCount = 10, offsetMult = 0.5, (0.1s) -> (0.9s)
		// float obstaclesTmp[] = {	
		// 	0.25, -3.1, -3.1, -3.1, -3.1, -3.1, 0.3, 0.4, 3.1, 3.1, 3.1, 3.1,
		// 	0.25, 0.6, -3.1, -3.1, -3.1, -3.1, 0.3, 3.1, 3.1, 3.1, 3.1, 3.1,
		// 	0.25, 0.4, -3.1, -3.1, -3.1, -3.1, 0.3, 0.6, 0.25, 3.1, 3.1, 3.1,
		// 	0.25, 0.4, 0.33, -3.1, -3.1, -3.1, 0.3, 0.6, 0.7, 3.1, 3.1, 3.1,
		// 	0.25, 0.4, 0.85, -3.1, -3.1, -3.1, 0.3, 0.6, 3.1, 3.1, 3.1, 3.1,
		// 	0.7, -3.1, -3.1, -3.1, -3.1, -3.1, 0.75, 3.1, 0.3, 3.1, 3.1, 3.1,
		// 	0.7, -3.1, 0.5, -3.1, -3.1, -3.1, 0.75, 3.1, 3.1, 3.1, 3.1, 3.1,
		// 	0.7, -3.1, 0.3, -3.1, -3.1, -3.1, 0.75, 0.2, 0.5, 3.1, 3.1, 3.1,
		// 	0.7, 0.4, 0.3, -3.1, -3.1, -3.1, 0.75, 0.5, 0.5, 3.1, 3.1, 3.1,
		// 	0.7, 0.7, 0.3, -3.1, -3.1, -3.1, 0.75, 3.1, 0.5, 3.1, 3.1, 3.1};

		// indoor: getObstaclesCount = 15, offsetMult = 0.5, (0.05, 0.05, 0.2) -> (0.5, 0.95, 0.2)
		// bounds in z go only to (0.01, 0.3), and limit v_z to +-0.5
		// check if obstacles are inflated (by 0.025 for pure quad)
		// float obstaclesTmp[] = {	
		// 	0.16, 0.48, 0.01, -3.1, -3.1, -3.1, 0.36, 0.63, 0.15, 3.1, 3.1, 3.1,
		// 	0.01, 0.40, 0.01, -3.1, -3.1, -3.1, 0.08, 0.75, 0.16, 3.1, 3.1, 3.1,
		// 	0.89, 0.50, 0.01, -3.1, -3.1, -3.1, 0.99, 0.70, 0.16, 3.1, 3.1, 3.1,
		// 	0.44, 0.54, 0.01, -3.1, -3.1, -3.1, 0.46, 0.56, 0.50, 3.1, 3.1, 3.1,
		// 	0.07, 0.00, 0.01, -3.1, -3.1, -3.1, 1.00, 0.01, 0.50, 3.1, 3.1, 3.1,
		// 	0.00, 0.00, 0.01, -3.1, -3.1, -3.1, 0.01, 1.00, 0.50, 3.1, 3.1, 3.1,
		// 	0.99, 0.00, 0.01, -3.1, -3.1, -3.1, 1.00, 1.00, 0.50, 3.1, 3.1, 3.1,
		// 	0.00, 0.99, 0.01, -3.1, -3.1, -3.1, 1.00, 1.00, 0.50, 3.1, 3.1, 3.1,
		// 	0.15, 0.25, 0.01, -3.1, -3.1, -3.1, 0.16, 0.85, 0.50, 3.1, 3.1, 3.1,
		// 	0.75, 0.25, 0.01, -3.1, -3.1, -3.1, 0.76, 0.78, 0.50, 3.1, 3.1, 3.1,
		// 	0.22, 0.25, 0.01, -3.1, -3.1, -3.1, 0.75, 0.26, 0.50, 3.1, 3.1, 3.1,
		// 	0.15, 0.85, 0.01, -3.1, -3.1, -3.1, 0.45, 0.86, 0.50, 3.1, 3.1, 3.1,
		// 	0.45, 0.85, 0.01, -3.1, -3.1, -3.1, 0.52, 0.86, 0.15, 3.1, 3.1, 3.1,
		// 	0.52, 0.85, 0.01, -3.1, -3.1, -3.1, 0.75, 0.86, 0.50, 3.1, 3.1, 3.1,
  //      	 	0.00, 0.00, 0.00, -3.1, -3.1, -3.1, 1.00, 1.00, 0.01, 3.1, 3.1, 3.1};
		
		copyArray(obstacles, obstaclesTmp, obstaclesLength);
	} else {
		std::cout << "ERROR: this obstacle set doesn't exist" << std::endl;
		exit(1);
	}	
}

void inflateObstacles(float *obstacles, float *obstaclesInflated, float inflateFactor, int obstaclesCount)
{
	for (int obs = 0; obs < obstaclesCount; ++obs) {
		for (int d = 0; d < 2*DIM; ++d) {
			if (d < DIM)
				obstaclesInflated[obs*2*DIM + d] = obstacles[obs*2*DIM + d] - inflateFactor;
			else
				obstaclesInflated[obs*2*DIM + d] = obstacles[obs*2*DIM + d] + inflateFactor;
		}
	}
}